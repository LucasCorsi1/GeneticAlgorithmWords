@page "/readwords"
@using GeneticAlgorithmWords.GA
@inject IJSRuntime JsRuntime


<div class="container">
    <h2>Interpretador de Palavras</h2>

    <div class="alert alert-secondary mt-4 mb-5" role="alert">
        <span class="oi oi-pencil mr-2" aria-hidden="true"></span>
        <strong>Task</strong>

        <span class="text-nowrap ml-1">
            A partir de um texto informado, o objetivo é fazer a IA recriar esse texto através de um algoritmo genético.
        </span>
    </div>

    <div class="input-group mb-4 mt-5">
        <input type="text" class="form-control" placeholder="Digite uma frase..." aria-label="Digite uma frase..." @bind="Target">
        <div class="input-group-append">
            <button class="btn btn-outline-primary" type="button" id="btnExecute" @onclick="Main">Executar</button>
        </div>
    </div>

    @{
        if (GeneticAlgo != null && GeneticAlgo.IsRunning)
        {
            <div class="w-100 d-flex justify-content-center my-3">
                <div class="spinner-grow text-primary" role="status">
                    <span class="visually-hidden" />
                </div>
                <div class="spinner-grow text-primary" role="status">
                    <span class="visually-hidden" />
                </div>
                <div class="spinner-grow text-primary" role="status">
                    <span class="visually-hidden" />
                </div>
            </div>
        }
    }

    <div class="form-group mt-3">
        <label class="fw-bold" for="textAreaResult">Resultados</label>
        <textarea readonly class="form-control" id="textAreaResult" rows="10" @bind="CurrentTextArea" />
        @{ Current = string.Empty; }
    </div>

    <ul class="list-group">
        <li class="list-group-item">
            ⬥ Geração: <span class="text-primary">@GeneticAlgo?.GenerationsNumber</span>
        </li>
        <li class="list-group-item">
            ⬥ Fitness: <span class="text-primary">@GeneticAlgo?.Fitness</span>
        </li>
        <li class="list-group-item">
            ⬥ Tempo: <span class="text-primary">@GeneticAlgo?.Counter</span>
        </li>
        @{
            if (GeneticAlgo?.Genes != null)
                foreach (var gene in GeneticAlgo?.Genes)
                {
                    Current += gene.Value.ToString();
                    CurrentTextArea += gene.Value.ToString();
                    if (Current.Length == Target.Length)
                    {
                        Current += "\r\n";
                        CurrentTextArea += "\r\n";
                    }
                }

            <li class="list-group-item">
                ⬥ Melhor Cromossomo: <span class="text-primary">@Current</span>
            </li>
        }

    </ul>
</div>




@code {
    private string Target { get; set; }
    private string Current { get; set; }
    private string CurrentTextArea { get; set; }
    private GeneticAlgorithmWords GeneticAlgo;
    private async Task Main() => await Run();
    private async Task Run()
    {
        CurrentTextArea = "";
        Current = "";
        GeneticAlgo = new GeneticAlgorithmWords();
        GeneticAlgo.StateHasChanged += StateHasChanged;
        GeneticAlgo.StartGeneticAlgo(Target);
    }
}
